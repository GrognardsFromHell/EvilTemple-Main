/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace EvilTemple.NativeEngineInterop.Generated {

using System;
using System.Runtime.InteropServices;

public class SceneNode : Node {
  private HandleRef swigCPtr;

  internal SceneNode(IntPtr cPtr, bool cMemoryOwn) : base(NativeEngineInteropPINVOKE.SceneNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(SceneNode obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void attachObject(MovableObject obj) {
    NativeEngineInteropPINVOKE.SceneNode_attachObject(swigCPtr, MovableObject.getCPtr(obj));
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort numAttachedObjects() {
    ushort ret = NativeEngineInteropPINVOKE.SceneNode_numAttachedObjects(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MovableObject getAttachedObject(ushort index) {
    IntPtr cPtr = NativeEngineInteropPINVOKE.SceneNode_getAttachedObject(swigCPtr, index);
    MovableObject ret = (cPtr == IntPtr.Zero) ? null : new MovableObject(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode createChildSceneNode() {
    IntPtr cPtr = NativeEngineInteropPINVOKE.SceneNode_createChildSceneNode__SWIG_0(swigCPtr);
    SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode createChildSceneNode(string name) {
    IntPtr cPtr = NativeEngineInteropPINVOKE.SceneNode_createChildSceneNode__SWIG_1(swigCPtr, name);
    SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SceneNode getParentSceneNode() {
    IntPtr cPtr = NativeEngineInteropPINVOKE.SceneNode_getParentSceneNode(swigCPtr);
    SceneNode ret = (cPtr == IntPtr.Zero) ? null : new SceneNode(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void removeChild(Node child) {
    NativeEngineInteropPINVOKE.SceneNode_removeChild(swigCPtr, Node.getCPtr(child));
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addChild(Node child) {
    NativeEngineInteropPINVOKE.SceneNode_addChild(swigCPtr, Node.getCPtr(child));
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisible(bool visible, bool cascade) {
    NativeEngineInteropPINVOKE.SceneNode_setVisible__SWIG_0(swigCPtr, visible, cascade);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setVisible(bool visible) {
    NativeEngineInteropPINVOKE.SceneNode_setVisible__SWIG_1(swigCPtr, visible);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public string getName() {
    string ret = NativeEngineInteropPINVOKE.SceneNode_getName(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setPosition(float x, float y, float z) {
    NativeEngineInteropPINVOKE.SceneNode_setPosition(swigCPtr, x, y, z);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getPosition() {
    Vector3 ret = new Vector3(NativeEngineInteropPINVOKE.SceneNode_getPosition(swigCPtr), false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOrientation(float w, float x, float y, float z) {
    NativeEngineInteropPINVOKE.SceneNode_setOrientation(swigCPtr, w, x, y, z);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public Quaternion getOrientation() {
    Quaternion ret = new Quaternion(NativeEngineInteropPINVOKE.SceneNode_getOrientation(swigCPtr), false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setScale(float x, float y, float z) {
    NativeEngineInteropPINVOKE.SceneNode_setScale(swigCPtr, x, y, z);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public Vector3 getScale() {
    Vector3 ret = new Vector3(NativeEngineInteropPINVOKE.SceneNode_getScale(swigCPtr), false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ushort numChildren() {
    ushort ret = NativeEngineInteropPINVOKE.SceneNode_numChildren(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Node getChild(ushort index) {
    IntPtr cPtr = NativeEngineInteropPINVOKE.SceneNode_getChild(swigCPtr, index);
    Node ret = (cPtr == IntPtr.Zero) ? null : new Node(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
