/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace EvilTemple.NativeEngineInterop {

using System;
using System.Runtime.InteropServices;

public partial class NativeEngine : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NativeEngine(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(NativeEngine obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~NativeEngine() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativeEngineInteropPINVOKE.delete_NativeEngine(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }


    private UserInterface _userInterface;

    public UserInterface UserInterface {
        get {
            if (_userInterface == null)
                _userInterface = new UserInterface(interfaceRoot());
            return _userInterface;
        }
    }

  public NativeEngine(NativeEngineSettings settings) : this(NativeEngineInteropPINVOKE.new_NativeEngine(NativeEngineSettings.getCPtr(settings)), true) {
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public void processEvents() {
    NativeEngineInteropPINVOKE.NativeEngine_processEvents(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public void renderFrame() {
    NativeEngineInteropPINVOKE.NativeEngine_renderFrame(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
  }

  public Scene mainScene() {
    IntPtr cPtr = NativeEngineInteropPINVOKE.NativeEngine_mainScene(swigCPtr);
    Scene ret = (cPtr == IntPtr.Zero) ? null : new Scene(cPtr, false);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public /* cstype* out */ IntPtr interfaceRoot() {
        /* csout* */ IntPtr ret = NativeEngineInteropPINVOKE.NativeEngine_interfaceRoot(swigCPtr);
    if (NativeEngineInteropPINVOKE.SWIGPendingException.Pending) throw NativeEngineInteropPINVOKE.SWIGPendingException.Retrieve();
        return ret;
  }

}

}
