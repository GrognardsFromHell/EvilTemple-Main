<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenTK</name>
    </assembly>
    <members>
        <member name="T:OpenTK.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The w component of the Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and w component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The w component of the new Vector4.</param>
        </member>
        <member name="M:OpenTK.Vector4.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector4.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector4.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector4.Scale(OpenTK.Vector4)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4.Scale(OpenTK.Vector4@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4.Sub(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4.Mult(OpenTK.Vector4,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector4.Mult(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector4.Div(OpenTK.Vector4,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector4.Div(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Add(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Subtract(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector4.Subtract(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Multiply(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Divide(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.Min(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector4.Min(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector4.Max(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector4.Max(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector4.Clamp(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Clamp(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Normalize(OpenTK.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Normalize(OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast(OpenTK.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.NormalizeFast(OpenTK.Vector4@,OpenTK.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Dot(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector4.Dot(OpenTK.Vector4@,OpenTK.Vector4@,System.Single@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector4.Lerp(OpenTK.Vector4,OpenTK.Vector4,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4.Lerp(OpenTK.Vector4@,OpenTK.Vector4@,System.Single,OpenTK.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4.BaryCentric(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector4.BaryCentric(OpenTK.Vector4@,OpenTK.Vector4@,OpenTK.Vector4@,System.Single,System.Single,OpenTK.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4,OpenTK.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4@,OpenTK.Matrix4@,OpenTK.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Transform(OpenTK.Vector4@,OpenTK.Quaternion@,OpenTK.Vector4@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector4.op_Addition(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Subtraction(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_UnaryNegation(OpenTK.Vector4)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Multiply(OpenTK.Vector4,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Multiply(System.Single,OpenTK.Vector4)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Division(OpenTK.Vector4,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Equality(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Inequality(OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Explicit(OpenTK.Vector4)~System.Single*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4.op_Explicit(OpenTK.Vector4)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:OpenTK.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector4.Equals(OpenTK.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector4.LengthFast"/>
            <seealso cref="P:OpenTK.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector4.Length"/>
            <seealso cref="P:OpenTK.Vector4.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector4.Length"/>
            <seealso cref="P:OpenTK.Vector4.LengthFast"/>
        </member>
        <member name="P:OpenTK.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:OpenTK.Vector3.Scale(OpenTK.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector3.Scale(OpenTK.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3.Sub(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3.Mult(OpenTK.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector3.Mult(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector3.Div(OpenTK.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector3.Div(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Add(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Subtract(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector3.Subtract(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Multiply(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Divide(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMin(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMin(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMax(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector3.ComponentMax(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector3.Min(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3.Max(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector3.Clamp(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Clamp(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Normalize(OpenTK.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Normalize(OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast(OpenTK.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.NormalizeFast(OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Dot(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3.Dot(OpenTK.Vector3@,OpenTK.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3.Cross(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector3.Cross(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector3.Lerp(OpenTK.Vector3,OpenTK.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3.Lerp(OpenTK.Vector3@,OpenTK.Vector3@,System.Single,OpenTK.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3.BaryCentric(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector3.BaryCentric(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single,System.Single,OpenTK.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformVector(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformVector(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormal(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormal(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormalInverse(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformNormalInverse(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformPosition(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformPosition(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Transform(OpenTK.Vector3@,OpenTK.Quaternion@,OpenTK.Vector3@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector3.TransformPerspective(OpenTK.Vector3,OpenTK.Matrix4)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:OpenTK.Vector3.TransformPerspective(OpenTK.Vector3@,OpenTK.Matrix4@,OpenTK.Vector3@)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:OpenTK.Vector3.CalculateAngle(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Vector3.CalculateAngle(OpenTK.Vector3@,OpenTK.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:OpenTK.Vector3.op_Addition(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Subtraction(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_UnaryNegation(OpenTK.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Multiply(OpenTK.Vector3,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Multiply(System.Single,OpenTK.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Division(OpenTK.Vector3,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Equality(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.op_Inequality(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector3.Equals(OpenTK.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector3.LengthFast"/>
            <seealso cref="P:OpenTK.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector3.Length"/>
            <seealso cref="P:OpenTK.Vector3.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector3.Length"/>
            <seealso cref="P:OpenTK.Vector3.LengthFast"/>
        </member>
        <member name="P:OpenTK.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="T:OpenTK.BezierCurve">
            <summary>
            Represents a bezier curve with as many points as you want.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurve.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.0f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{OpenTK.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(OpenTK.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Single,OpenTK.Vector2[])">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.#ctor(System.Single,System.Collections.Generic.IEnumerable{OpenTK.Vector2})">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurve"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <returns>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculateLength(System.Collections.Generic.IList{OpenTK.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the length of the specified bezier curve.
            </summary>
            <param name="points">The points.</param>
            <param name="precision">The precision value.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Length of curve.</returns>
            <remarks><para>The precision gets better as the <paramref name="precision"/>
            value gets smaller.</para>
            <para>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</para></remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePoint(System.Collections.Generic.IList{OpenTK.Vector2},System.Single,System.Single)">
            <summary>
            Calculates the point on the given bezier curve with the specified t parameter.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, a value between 0.0f and 1.0f.</param>
            <param name="parallel">The parallel value.</param>
            <returns>Resulting point.</returns>
            <remarks>The <paramref name="parallel"/> parameter defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f represents a curve that has always a distance
            of 5.0f to the orignal curve.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurve.CalculatePointOfDerivative(System.Collections.Generic.IList{OpenTK.Vector2},System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of the given bezier function.
            </summary>
            <param name="points">The points.</param>
            <param name="t">The t parameter, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="P:OpenTK.BezierCurve.Points">
            <summary>
            Gets the points of this curve.
            </summary>
            <remarks>The first point and the last points represent the anchor points.</remarks>
        </member>
        <member name="T:OpenTK.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:OpenTK.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="M:OpenTK.Vector2.#ctor(OpenTK.Vector4)">
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:OpenTK.Vector2.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector2.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:OpenTK.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.Scale(System.Single,System.Single)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:OpenTK.Vector2.Scale(OpenTK.Vector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:OpenTK.Vector2.Scale(OpenTK.Vector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:OpenTK.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:OpenTK.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2.Sub(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2.Mult(OpenTK.Vector2,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Vector2.Mult(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Vector2.Div(OpenTK.Vector2,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:OpenTK.Vector2.Div(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Add(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Subtract(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:OpenTK.Vector2.Subtract(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Multiply(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Divide(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMin(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMin(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMax(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:OpenTK.Vector2.ComponentMax(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:OpenTK.Vector2.Min(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector2.Max(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:OpenTK.Vector2.Clamp(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.Clamp(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:OpenTK.Vector2.Normalize(OpenTK.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.Normalize(OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast(OpenTK.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:OpenTK.Vector2.NormalizeFast(OpenTK.Vector2@,OpenTK.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:OpenTK.Vector2.Dot(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:OpenTK.Vector2.Dot(OpenTK.Vector2@,OpenTK.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:OpenTK.Vector2.Lerp(OpenTK.Vector2,OpenTK.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2.Lerp(OpenTK.Vector2@,OpenTK.Vector2@,System.Single,OpenTK.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2.BaryCentric(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:OpenTK.Vector2.BaryCentric(OpenTK.Vector2@,OpenTK.Vector2@,OpenTK.Vector2@,System.Single,System.Single,OpenTK.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:OpenTK.Vector2.Transform(OpenTK.Vector2,OpenTK.Quaternion)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Transform(OpenTK.Vector2@,OpenTK.Quaternion@,OpenTK.Vector2@)">
            <summary>
            Transforms a vector by a quaternion rotation.
            </summary>
            <param name="vec">The vector to transform.</param>
            <param name="quat">The quaternion to rotate the vector by.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Vector2.op_Addition(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Subtraction(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_UnaryNegation(OpenTK.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Multiply(OpenTK.Vector2,System.Single)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Multiply(System.Single,OpenTK.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Division(OpenTK.Vector2,System.Single)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Equality(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.op_Inequality(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Vector2.Equals(OpenTK.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:OpenTK.Vector2.LengthFast"/>
            <seealso cref="P:OpenTK.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:OpenTK.Vector2.Length"/>
            <seealso cref="P:OpenTK.Vector2.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:OpenTK.Vector2.Length"/>
            <seealso cref="P:OpenTK.Vector2.LengthFast"/>
        </member>
        <member name="P:OpenTK.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:OpenTK.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="T:OpenTK.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Pi">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver2">
            <summary>
            Defines the value of Pi divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver3">
            <summary>
            Defines the value of Pi divided by three as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver4">
            <summary>
            Definesthe value of  Pi divided by four as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.PiOver6">
            <summary>
            Defines the value of Pi divided by six as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.TwoPi">
            <summary>
            Defines the value of Pi multiplied by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.ThreePiOver2">
            <summary>
            Defines the value of Pi multiplied by 3 and divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.E">
            <summary>
            Defines the value of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Log10E">
            <summary>
            Defines the base-10 logarithm of E.
            </summary>
        </member>
        <member name="F:OpenTK.MathHelper.Log2E">
            <summary>
            Defines the base-2 logarithm of E.
            </summary>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.MathHelper.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenTK.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenTK.MathHelper.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.MathHelper.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.MathHelper.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.MathHelper.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:OpenTK.MathHelper.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two double values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:OpenTK.MathHelper.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="T:OpenTK.BezierCurveQuadric">
            <summary>
            Represents a quadric bezier curve with two anchor and one control point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.ControlPoint">
            <summary>
            Control point, controls the direction of both endings of the curve.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveQuadric.Parallel">
            <summary>
            The parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveQuadric"/>.
            </summary>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.#ctor(System.Single,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveQuadric"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor.</param>
            <param name="endAnchor">The end anchor.</param>
            <param name="controlPoint">The control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveQuadric.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.BezierCurveCubic">
            <summary>
            Represents a cubic bezier curve with two anchor and two control points.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.StartAnchor">
            <summary>
            Start anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.EndAnchor">
            <summary>
            End anchor point.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.FirstControlPoint">
            <summary>
            First control point, controls the direction of the curve start.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.SecondControlPoint">
            <summary>
            Second control point, controls the direction of the curve end.
            </summary>
        </member>
        <member name="F:OpenTK.BezierCurveCubic.Parallel">
            <summary>
            Gets or sets the parallel value.
            </summary>
            <remarks>This value defines whether the curve should be calculated as a
            parallel curve to the original bezier curve. A value of 0.0f represents
            the original curve, 5.0f i.e. stands for a curve that has always a distance
            of 5.f to the orignal curve at any point.</remarks>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveCubic"/>.
            </summary>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.#ctor(System.Single,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new <see cref="T:OpenTK.BezierCurveCubic"/>.
            </summary>
            <param name="parallel">The parallel value.</param>
            <param name="startAnchor">The start anchor point.</param>
            <param name="endAnchor">The end anchor point.</param>
            <param name="firstControlPoint">The first control point.</param>
            <param name="secondControlPoint">The second control point.</param>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculatePoint(System.Single)">
            <summary>
            Calculates the point with the specified t.
            </summary>
            <param name="t">The t value, between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculatePointOfDerivative(System.Single)">
            <summary>
            Calculates the point with the specified t of the derivative of this function.
            </summary>
            <param name="t">The t, value between 0.0f and 1.0f.</param>
            <returns>Resulting point.</returns>
        </member>
        <member name="M:OpenTK.BezierCurveCubic.CalculateLength(System.Single)">
            <summary>
            Calculates the length of this bezier curve.
            </summary>
            <param name="precision">The precision.</param>
            <returns>Length of the curve.</returns>
            <remarks>The precision gets better when the <paramref name="precision"/>
            value gets smaller.</remarks>
        </member>
        <member name="T:OpenTK.Box2">
            <summary>
            Defines a 2d box (rectangle).
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Left">
            <summary>
            The left boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Right">
            <summary>
            The right boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Top">
            <summary>
            The top boundary of the structure.
            </summary>
        </member>
        <member name="F:OpenTK.Box2.Bottom">
            <summary>
            The bottom boundary of the structure.
            </summary>
        </member>
        <member name="M:OpenTK.Box2.#ctor(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="topLeft">AnOpenTK.Vector2 describing the top-left corner of the Box2.</param>
            <param name="bottomRight">An OpenTK.Vector2 describing the bottom-right corner of the Box2.</param>
        </member>
        <member name="M:OpenTK.Box2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Box2 with the specified dimensions.
            </summary>
            <param name="left">The position of the left boundary.</param>
            <param name="top">The position of the top boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
        </member>
        <member name="M:OpenTK.Box2.FromTLRB(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Box2 with the specified dimensions.
            </summary>
            <param name="top">The position of the top boundary.</param>
            <param name="left">The position of the left boundary.</param>
            <param name="right">The position of the right boundary.</param>
            <param name="bottom">The position of the bottom boundary.</param>
            <returns>A new OpenTK.Box2 with the specfied dimensions.</returns>
        </member>
        <member name="M:OpenTK.Box2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> describing the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenTK.Box2.Width">
            <summary>
            Gets a float describing the width of the Box2 structure.
            </summary>
        </member>
        <member name="P:OpenTK.Box2.Height">
            <summary>
            Gets a float describing the height of the Box2 structure.
            </summary>
        </member>
        <member name="T:OpenTK.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Construct a new Quaternion from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:OpenTK.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new Quaternion
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="M:OpenTK.Quaternion.ToAxisAngle(OpenTK.Vector3@,System.Single@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:OpenTK.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize">
            <summary>
            Scales the Quaternion to unit length.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate">
            <summary>
            Convert this quaternion to its conjugate
            </summary>
        </member>
        <member name="F:OpenTK.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:OpenTK.Quaternion.Add(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Add(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:OpenTK.Quaternion.Sub(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Sub(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Mult(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Mult(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion@,OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion@,System.Single,OpenTK.Quaternion@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:OpenTK.Quaternion.Multiply(OpenTK.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate(OpenTK.Quaternion)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <returns>The conjugate of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Conjugate(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <param name="result">The conjugate of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.Invert(OpenTK.Quaternion)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <returns>The inverse of the given quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Invert(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize(OpenTK.Quaternion)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <returns>The normalized quaternion</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Normalize(OpenTK.Quaternion@,OpenTK.Quaternion@)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <param name="result">The normalized quaternion</param>
        </member>
        <member name="M:OpenTK.Quaternion.FromAxisAngle(OpenTK.Vector3,System.Single)">
            <summary>
            Build a quaternion from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaternion.Slerp(OpenTK.Quaternion,OpenTK.Quaternion,System.Single)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Addition(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Subtraction(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(OpenTK.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Multiply(System.Single,OpenTK.Quaternion)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Equality(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.op_Inequality(OpenTK.Quaternion,OpenTK.Quaternion)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Quaternion.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:OpenTK.Quaternion.Equals(OpenTK.Quaternion)">
            <summary>
            Compares this Quaternion instance to another Quaternion for equality. 
            </summary>
            <param name="other">The other Quaternion to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="P:OpenTK.Quaternion.XYZ">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the quaternion.
            </summary>
            <seealso cref="P:OpenTK.Quaternion.LengthSquared"/>
        </member>
        <member name="P:OpenTK.Quaternion.LengthSquared">
            <summary>
            Gets the square of the quaternion length (magnitude).
            </summary>
        </member>
        <member name="T:OpenTK.Functions">
            <summary>
            Contains mathematical functions for the OpenTK.Math toolkit.
            </summary>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:OpenTK.Functions.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:OpenTK.Functions.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:OpenTK.Functions.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.Functions.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:OpenTK.Functions.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:OpenTK.Functions.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="F:OpenTK.Functions.PIF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.RTODF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.DTORF">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.PI">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.RTOD">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="F:OpenTK.Functions.DTOR">
            <summary>
            Obsolete. Do not use.
            </summary>
        </member>
        <member name="M:OpenTK.Functions.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:OpenTK.Functions.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="T:OpenTK.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OpenTK.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenTK.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:OpenTK.Half">
            <summary>
            The name Half is derived from half-precision floating-point number.
            It occupies only 16 bits, which are split into 1 Sign bit, 5 Exponent bits and 10 Mantissa bits.
            </summary>
            <remarks>
            Quote from ARB_half_float_pixel specification:
            Any representable 16-bit floating-point value is legal as input to a GL command that accepts 16-bit floating-point data.  The
            result of providing a value that is not a floating-point number (such as infinity or NaN) to such a command is unspecified,
            but must not lead to GL interruption or termination. Providing a denormalized number or negative zero to GL must yield
            predictable results.
            </remarks>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Single)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="f">32-bit single-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Single,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="f">32-bit single-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Double)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="d">64-bit double-precision floating-point number.</param>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Double,System.Boolean)">
            <summary>
            The new Half instance will convert the parameter into 16-bit half-precision floating-point.
            </summary>
            <param name="d">64-bit double-precision floating-point number.</param>
            <param name="throwOnError">Enable checks that will throw if the conversion result is not meaningful.</param>
        </member>
        <member name="M:OpenTK.Half.SingleToHalf(System.Int32)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Half.ToSingle">
            <summary>Converts the 16-bit half to 32-bit floating-point.</summary>
            <returns>A single-precision floating-point number.</returns>
        </member>
        <member name="M:OpenTK.Half.HalfToFloat(System.UInt16)">
            <summary>Ported from OpenEXR's IlmBase 1.0.1</summary>
        </member>
        <member name="M:OpenTK.Half.op_Explicit(System.Single)~OpenTK.Half">
            <summary>
            Converts a System.Single to a OpenTK.Half.
            </summary>
            <param name="f">The value to convert.
            A <see cref="T:System.Single"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Explicit(System.Double)~OpenTK.Half">
            <summary>
            Converts a System.Double to a OpenTK.Half.
            </summary>
            <param name="d">The value to convert.
            A <see cref="T:System.Double"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:OpenTK.Half"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Implicit(OpenTK.Half)~System.Single">
            <summary>
            Converts a OpenTK.Half to a System.Single.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Single"/>
            </returns>
        </member>
        <member name="M:OpenTK.Half.op_Implicit(OpenTK.Half)~System.Double">
            <summary>
            Converts a OpenTK.Half to a System.Double.
            </summary>
            <param name="h">The value to convert.
            A <see cref="T:OpenTK.Half"/>
            </param>
            <returns>The result of the conversion.
            A <see cref="T:System.Double"/>
            </returns>
        </member>
        <member name="F:OpenTK.Half.SizeInBytes">
            <summary>The size in bytes for an instance of the Half struct.</summary>
        </member>
        <member name="F:OpenTK.Half.MinValue">
            <summary>Smallest positive half</summary>
        </member>
        <member name="F:OpenTK.Half.MinNormalizedValue">
            <summary>Smallest positive normalized half</summary>
        </member>
        <member name="F:OpenTK.Half.MaxValue">
            <summary>Largest positive half</summary>
        </member>
        <member name="F:OpenTK.Half.Epsilon">
            <summary>Smallest positive e for which half (1.0 + e) != half (1.0)</summary>
        </member>
        <member name="M:OpenTK.Half.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Constructor used by ISerializable to deserialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Half.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used by ISerialize to serialize the object.</summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:OpenTK.Half.FromBinaryStream(System.IO.BinaryReader)">
            <summary>Updates the Half by reading from a Stream.</summary>
            <param name="bin">A BinaryReader instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Half.ToBinaryStream(System.IO.BinaryWriter)">
            <summary>Writes the Half into a Stream.</summary>
            <param name="bin">A BinaryWriter instance associated with an open Stream.</param>
        </member>
        <member name="M:OpenTK.Half.Equals(OpenTK.Half)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified OpenTK.Half value.
            </summary>
            <param name="other">OpenTK.Half object to compare to this instance..</param>
            <returns>True, if other is equal to this instance; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Half.CompareTo(OpenTK.Half)">
            <summary>
            Compares this instance to a specified half-precision floating-point number
            and returns an integer that indicates whether the value of this instance
            is less than, equal to, or greater than the value of the specified half-precision
            floating-point number. 
            </summary>
            <param name="other">A half-precision floating-point number to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value. If the number is:
            <para>Less than zero, then this instance is less than other, or this instance is not a number
            (OpenTK.Half.NaN) and other is a number.</para>
            <para>Zero: this instance is equal to value, or both this instance and other
            are not a number (OpenTK.Half.NaN), OpenTK.Half.PositiveInfinity, or
            OpenTK.Half.NegativeInfinity.</para>
            <para>Greater than zero: this instance is greater than othrs, or this instance is a number
            and other is not a number (OpenTK.Half.NaN).</para>
            </returns>
        </member>
        <member name="M:OpenTK.Half.ToString">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Half.ToString(System.String,System.IFormatProvider)">
            <summary>Converts this Half into a human-legible string representation.</summary>
            <param name="format">Formatting for the output string.</param>
            <param name="formatProvider">Culture-specific formatting information.</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="M:OpenTK.Half.Parse(System.String)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Half.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="M:OpenTK.Half.TryParse(System.String,OpenTK.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Half.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,OpenTK.Half@)">
            <summary>Converts the string representation of a number to a half-precision floating-point equivalent. Returns success.</summary>
            <param name="s">String representation of the number to convert.</param>
            <param name="style">Specifies the format of s.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <param name="result">The Half instance to write to.</param>
            <returns>Success.</returns>
        </member>
        <member name="M:OpenTK.Half.GetBytes(OpenTK.Half)">
            <summary>Returns the Half as an array of bytes.</summary>
            <param name="h">The Half to convert.</param>
            <returns>The input as byte array.</returns>
        </member>
        <member name="M:OpenTK.Half.FromBytes(System.Byte[],System.Int32)">
            <summary>Converts an array of bytes into Half.</summary>
            <param name="value">A Half in it's byte[] representation.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A new Half instance.</returns>
        </member>
        <member name="P:OpenTK.Half.IsZero">
            <summary>Returns true if the Half is zero.</summary>
        </member>
        <member name="P:OpenTK.Half.IsNaN">
            <summary>Returns true if the Half represents Not A Number (NaN)</summary>
        </member>
        <member name="P:OpenTK.Half.IsPositiveInfinity">
            <summary>Returns true if the Half represents positive infinity.</summary>
        </member>
        <member name="P:OpenTK.Half.IsNegativeInfinity">
            <summary>Returns true if the Half represents negative infinity.</summary>
        </member>
        <member name="T:OpenTK.AutoGeneratedAttribute">
            <summary>
            Indicates that this function is generated automatically by a tool.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.Category">
            <summary>
            Specifies the category of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.Version">
            <summary>
            Specifies the version of this OpenGL function.
            </summary>
        </member>
        <member name="F:OpenTK.AutoGeneratedAttribute.EntryPoint">
            <summary>
            Specifies the entry point of the OpenGL function.
            </summary>
        </member>
        <member name="M:OpenTK.AutoGeneratedAttribute.#ctor">
            <summary>
            Constructs a new AutoGeneratedAttribute instance.
            </summary>
        </member>
        <member name="T:OpenTK.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:OpenTK.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.#ctor(OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4,OpenTK.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:OpenTK.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="M:OpenTK.Matrix4.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:OpenTK.Matrix4.CreateFromAxisAngle(OpenTK.Vector3,System.Single,OpenTK.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateFromAxisAngle(OpenTK.Vector3,System.Single)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationX(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationX(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationY(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationY(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationZ(System.Single,OpenTK.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateRotationZ(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(OpenTK.Vector3@,OpenTK.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateTranslation(OpenTK.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:OpenTK.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,OpenTK.Matrix4@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:OpenTK.Matrix4.Translation(OpenTK.Vector3)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="trans">The translation vector.</param>
            <returns>A new Matrix4 instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(OpenTK.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateX(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateY(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.RotateZ(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Rotate(OpenTK.Vector3,System.Single)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Rotate(OpenTK.Quaternion)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.LookAt(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Mult(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Mult(OpenTK.Matrix4@,OpenTK.Matrix4@,OpenTK.Matrix4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:OpenTK.Matrix4.Invert(OpenTK.Matrix4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose(OpenTK.Matrix4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Transpose(OpenTK.Matrix4@,OpenTK.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:OpenTK.Matrix4.op_Multiply(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:OpenTK.Matrix4.op_Equality(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.op_Inequality(OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenTK.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare tresult.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:OpenTK.Matrix4.Equals(OpenTK.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="P:OpenTK.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:OpenTK.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
    </members>
</doc>
